#             3rd Party Include File                          |
# version 1.5 (Last updated 5/16/2004)                        |
#Check the OHRRPGCE Homepage for the most up to date version  |
#Please do not modify this file before sending or hosting     |
#This version is intended for OHRRPGCE v.Paternoster          |
#                                                             |
#The 3rd Party HSI is compiled and directed by FyreWulff      |
#---------------------------------------------------------====/
include, plotscr.hsd
#------------------------------------------------------------\
# It is highly suggested that you do not modify this file    |
# so that people trying to help you debug scripts using      |
# these functions will be able to do so.                     |
#-------------------------------------------------------=====/            

#=====================#
#Constants Definitions#
#=====================#
define constant, begin

 #these are for use in FyreWulff's havemoney script
 1, strict
 0, loose 

 #these are for use in T-Master's time-altering plotscripting commands
 51, days   
 52, hours 
 53, minutes 
 54, seconds 

 #these are for use in FyreWulff's clearmap script
 1, clearwalls
 0, preserve walls

 #For use in in Mad Cacti's math scripts, error is returned by math functions in some cases. 
 -1, error

 #For use in FyreWulff's unequipparty script
 0, entire party
 1, active only
 2, reserve only
 
end 

#=====================#
#Operator  Definitions#
#=====================#

define operator, begin 

#For Mad Cacti's scripts
25, times sine, sine 
25, times cosine, cosine 
30, div, divideround 

end 

#=====================#
#   Global Variables  #  all Third Party HSI global variables start from 1024 and go back
#=====================#  to prevent conflicts. For now let's keep them between 1001 and 1024

global variable, begin

  1024, vehiclex #for use in savevechicleposition and etc
  1023, vehicley #  "        "          "              "
  1022, vehicledirection # saves vehicle direction, used in script above
  1021, vehicleid # saves which NPC is the vehicle

end

#=====================#
# Script Definitions  #
#=====================#
define script, begin

 autonumber, tb, 1, 0   # tb(textbox) : shows text box with auto waitfortextbox
 autonumber, havemoney , 2, 1, 0  #havemoney(amount,strictness) : checks for money
 autonumber, distance , 2, 0, 2  #distance(num1,num2) : between two values
 autonumber, xdistance , 2, 0, 1  #xdistance(Hero#,NPC#) : distance between hero# and npc# x's
 autonumber, ydistance , 2, 0, 1  #ydistance(Hero#,NPC#) : distance between hero# and npc# y's

 autonumber, abs , 1, 0  # absolute value
 autonumber, trunc , 2, 0, 0  # truncate
 autonumber, resettime , 0   # reset engine time
 autonumber, getinterval , 1, 53  #get engine time interval
 autonumber, setinterval , 2, 53, 0   # set engine time interval

 autonumber, clearmap, 2, 0, 1 # clearmap(tile,walls) : map clear with tile #, 
			       # default walls will also be cleared unless "preserve walls" is used
 autonumber,save vehicle, 1, 0 # saves vehicle position
 autonumber,restore vehicle, 0 #restores vehicle at it's saved position

 #Mad Cacti's scripts#########################################################################

 autonumber, divideround, 2, 0, 1 #Returns the rounded answer to <1st> / <2nd> 
 autonumber, sqrt, 1, 0 #Returns the square root. 
 autonumber, sine, 2, 100, 50 #Returns <1st> times sine of <2nd>. 50 degrees to a right angle. maximum input: 1st: up to 116, 2nd: anything 
 autonumber, sine sqrt, 1, 0 #Optimised square root function usable only by sine script. 
 autonumber, cosine, 2, 100, 0 #Same arguments as sine script. 
 autonumber, tan, 2, 100, 0 #Note: may return error. 
 autonumber, digit, 2, 0, 0 #returns a digit <2nd> in number <1st>. A better, rewriten version of Cubes script. 

 #############################################################################################

 autonumber,unequip party, 1, 0 #takes away all of the party's equipment
 autonumber,delete all items, 0 #takes away all items in player's inventory
 autonumber,reset tags, 0 # resets all regular tags and One Time Use NPC tags
 autonumber,reset map, 0 # resets the map
 autonumber,fake door, 3, 0, 0, 0 # fakes a door to map, x, y

end

#=====================#
#     The Scripts     #
#=====================#


script, tb, textbox, begin #TB script written by FyreWulff
 showtextbox(textbox)
 waitfortextbox
end


script, havemoney, amount, strictness, begin #have money script written by FyreWulff

 if( paymoney(amount + 1) == true, and, strictness == strict ) then ( getmoney(amount), return (true) )
 if( paymoney(amount -- 1) == true, and, strictness == strict ) then ( getmoney(amount), return (true) )
 if( paymoney(amount) == true, and, strictness == loose  ) then ( getmoney(amount), return (true) )
 if( paymoney(amount) == false) then (return (false) )

end


script, distance, num1, num2, begin #by FyreWulff
  return ( abs(num1 -- num2) )
end


script, x distance, heronum, npcnum, begin #by FyreWulff
  return ( abs( herox(heronum) -- npcx(npcnum) ) )
end

script, y distance, heronum, npcnum, begin #by FyreWulff
  return ( abs( heroy(heronum) -- npcy(npcnum) ) )
end
  


script, abs, n, begin #Written by T-Master
  if(n<<0) then(return(n * -1)) 
  else(return(n)) 
end

script, trunc, n, o, begin #written by T-master & CodyWatts
  return((n -- (n, mod, o)) / o) 
end

script, resettime, begin #Written by T-Master
 write general(days, 0) 
 write general(hours, 0) 
 write general(minutes, 0) 
 write general(seconds, 0) 
end 


script, getinterval, interval, begin  #Written by T-Master
 return(read general(interval)) 
end 

script, setinterval, interval, value, begin #Written by T-Master
 write general(interval, value) 
end

script, clearmap, cleartile, wallclear, begin
      variable(xtile,ytile)
      xtile := 0 , ytile := 0
	for(xtile,0,3199,1) do, begin
		for(ytile,0,1999,1) do, begin
			writemapblock(xtile,ytile,cleartile)
			if (wallclear) then ( writepassblock(xtile,ytile,0) )
		end
	end
end

script, save vehicle, vechnpc, begin
   vehiclex := npcx(vechnpc)
   vehicley := npcy(vechnpc)
   vehicledirection := npcdirection(vechnpc)
   vehicleid := vechnpc
end

script, restore vehicle, begin
   setnpcposition(vehicleid,vehiclex,vehicley)
   setnpcdirection(vehicleid, vehicledirection)
end


script, divideround, n, m, begin 
if (m == 0) then (return (error)) else (return ((n + m / 2) / m)) 
end 

script, sqrt, fi, begin 
variable (start, divi, approx) 
if (fi << 0) then (return (error)) else, begin #Can't take the root of a negative 
if (fi >= 32761) then (return (181)) else, begin #Prevent overflows 
if (fi >= 22500) then (start := 150) else ( 
if (fi >= 14400) then (start := 120) else ( 
if (fi >= 8100) then (start := 90) else ( 
if (fi >= 4225) then (start := 65) else ( 
if (fi >= 1600) then (start := 40) else ( 
if (fi >= 900) then (start := 30) else ( 
if (fi >= 400) then (start := 20) else ( 
if (fi >= 100) then (start := 10) else (start := 0) 
))))))) 
while (approx == 0) do, begin 
divi := start ^ 2 
if (divi >= fi) then (approx := start) 
start := start + 1 
end 
if (divi == fi) then (return (approx)) else, begin 
if ((divi -- approx) == fi) then (return (approx -- 1)) else (return (fi / approx + 1)) 
end 
end 
end 
end 

#Sine- angles are 50 measures to a right angle. To convert from degrees: angle = 50 * degrees / 90. 
#Multiplier is anything up to 116. 
#This is optimised, so don't try to understand it... its looks nothing like the sine formula x - x^3/3! + x^5/5!.. etc 
script, sine, mult, angle, begin 
variable (mult times angle, sum, sign) 
if (angle << 0) then (angle := 0 -- angle, sign := 1) #allow for postive / negative wave nature of graph 
sign := sign + angle / 100 
sign := sign, mod, 2 
angle := angle, mod, 100 #this part converts the angle to a value between 0 and 50. 
if (angle >> 50) then (angle := 100 -- angle) 
mult times angle := mult * angle 
sum := ((15 * mult + 2) / 4) * angle #add term 1 
sum := sum -- ((sine sqrt ((5 * mult times angle + 4) / 8) * angle + 16) / 32) ^ 2 #add term 2 
sum := sum + ((sine sqrt ((mult times angle + 16) / 32) * angle ^ 2 + 506) / 1013) ^ 2 #add term 3 
if (sign == 1) then (return (0 -- (sum + 60) / 120)) else (return ((sum + 60) / 120)) #return sum / 120 (rounded) 
end 

script, sine sqrt, fi, begin #optimised version of sqrt for sine only 
variable (start, divi, approx) 
if (fi >= 1369) then, begin 
if (fi >= 2916) then, begin 
if (fi >= 3969) then (start := 63) else (start := 54) 
end, else, begin 
if (fi >= 2025) then (start := 45) else (start := 37) 
end 
end, else, begin 
if (fi >= 324) then, begin 
if (fi >= 784) then (start := 28) else (start := 18) 
end, else, begin 
if (fi >= 81) then (start := 9) else (start := 0) 
end 
end 
while (approx == 0) do, begin 
divi := start ^ 2 
if (divi >= fi) then (approx := start) 
start := start + 1 
end 
if (divi == fi) then (return (approx)) else, begin 
if ((divi -- approx) == fi) then (return (approx -- 1)) else (return (fi / approx + 1)) 
end 
end 

script, cosine, mult, angle, begin 
return (sine (mult, 50 -- angle)) 
end 

script, tan, mult, angle, begin 
variable (temp) 
temp := angle, mod, 100 
if (temp == 50, or, temp == -50) then (return (error)) else, begin #Tan is undefined at these points 
return ((mult * 116, times sine, angle), div, (116, times cosine, angle)) 
end 
end 

script, digit, value, dgtno, begin 
if (dgtno >> 5) then (dgtno := 5) 
return ((value / 10 ^ (dgtno -- 1)), mod, 10) 
end 

script, unequip party, type, begin
  variable(heroslot), heroslot := 0
  variable(itemslot), itemslot := 0
  variable(min hero slot) , min hero slot := 0
  variable(max hero slot) , max hero slot := 40

  if( type == active only ) then( max hero slot := 3 , min hero slot := 0 )
  if( type == reserve only ) then( max hero slot := 40 , min hero slot := 4)

  for(heroslot,min hero slot,max hero slot) do, begin
    for(itemslot,1,5) do ( unequip( heroslot, itemslot ) )
  end     
end

script, delete all items, begin
  variable(loop)
  for(loop,0,255) do ( deleteitem(loop,100) )
end

script, reset tags, begin
  variable(tagloop)  
  for(tagloop,2,2002) do ( settag(tagloop, false) ) 
end

script, reset map, begin
  teleporttomap(currentmap,herox,heroy)
end

script, fake door, map, x, y, begin
   suspendplayer
   fadescreenout
   wait(5)
   teleporttomap(map,x,y)
   wait(1)
   fadescreenin
   resumeplayer
end
# EOF